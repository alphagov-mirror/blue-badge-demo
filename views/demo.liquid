<!DOCTYPE html>
<html>
  <head>
    <style>
      html {
        background-color: #EBEBEB;
        font-family: "Helvetica Neue", "Arial", sans-serif;
      }

      body::after {
        content: "GDS";
        bottom: 0;
        right: 0;
        left: 0;
        padding: 0.5em 1em;
        background-color: #2E89CA;
        color: white;
        text-align: right;
        position: fixed;
        font-size: 18pt;
      }

      #diagram {
        width: 70vw;
        height: 100vh;
        position: relative;
      }

      .node {
        position: absolute;
        width: 20%;
        text-align: center;
        font-size: 2.5vh;
        border: 3px solid black;
        background-color: white;
      }

      .node img {
        height: 6vh;
        width: 6vh;
        float: left;
        padding: 3vh 1vh;
        border-right: 3px solid black;
        margin-right: 0.5em;
      }

      .node figcaption {
        padding: 0.5em;
        text-align: left;
        font-weight: bold;
      }

      .node figcaption span {
        display: block;
        font-weight: normal;
      }

      .node.purple img { background-color: #7033CC; }
      .node.green img  { background-color: #85B045; }
      .node.blue img   { background-color: #42A2B3; }
      .node.yellow img { background-color: #F8BD32; }
      .node.red img    { background-color: #CC4C33; }
      .node.pink img   { background-color: #CC33B2; }

      .node.flash img {
        animation-name: img-invert;
        animation-duration: 2s;
        animation-iteration-count: infinite;
      }

      @keyframes img-invert {
        0% { filter: invert(0); }
        50% { filter: invert(1); }
        100% { filter: invert(0); }
      }

      @keyframes fade {
        50% { opacity: 0; }
        100% { opacity: 1; }
      }

      .node.left {
        left: calc(25% - 28vh);
      }

      .node.middle {
        left: calc(50% - 28vh);
      }

      .node.right {
        left: calc(75% - 28vh);
      }

      .node.vertical-middle {
        top: calc(50% - 2em - 10vh);
      }

      .node.vertical-upper {
        top: calc(33% - 2em - 10vh);
      }

      .node.vertical-lower {
        top: calc(66% - 2em - 10vh);
      }

      .node.vertical-very-lower {
        top: calc(77% - 2em - 10vh);
      }

      .node.vertical-very-upper {
        top: calc(22% - 2em - 10vh);
      }

      .node .bubble {
        position: absolute;
        top: -3em;
        width: 75%;
        text-align: center;
        background-color: #002B36;
        margin-left: 12.5%;
        padding: 3px;
        color: white;
        border-radius: 6px;
        font-family: monospace;
        font-weight: bold;
        font-size: 17pt;
        animation-name: bubble-bounce;
        animation-duration: 4s;
        animation-iteration-count: infinite;
        display: none;
      }

      .node .bubble.show {
        display: block;
      }

      .node.invisible {
        opacity: 0.001;
      }

      .node.matched::after { content: "\1F197\fe0f"; }
      .node.unmatched::after { content: "\2753\fe0f"; }
      .node.matching::after { content: "\1F50D\FE0F"; animation: fade 2s infinite; }
      .node.asking::after { content: "\1F4AC\FE0F"; animation: fade 2s infinite; }
      .node.answered::after { content: "\2714\FE0F"; }
      .node.answered_bad::after { content: "\274C\FE0F"; }

      .node::after {
        position: absolute;
        left: 3vh;
        bottom: 1vh;
        font-size: 2em;
      }

      .bubble::after {
        content: "";
        width: 0;
        height: 0;
        border-left: 20px solid transparent;
        border-right: 20px solid transparent;
        border-top: 20px solid #002B36;
        position: absolute;
        bottom: -20px;
        left: 38%;
      }

      @keyframes bubble-bounce {
        0%   { top: -3em; }
        50%  { top: -2.5em; }
        100% { top: -3em; }
      }

      .jtk-connector path {
        stroke: #000;
        stroke-width: 2pt;
      }

      #logs {
        width: calc(40vw - 2ch);
        position: absolute;
        right: 1vw;
        top: 2vh;
        height: calc(92vh - 2em - 2ch);
        background-color: #002B36;
        color: #93A1A1;
        font-family: monospace;
        padding: 1ch 1ch;
      }

      @keyframes highlight-path {
        from { stroke: #F00; }
        to   { stroke: #000; }
      }

      .jtk-connector.highlight path {
        animation-name: highlight-path;
        animation-duration: 5s;
      }

      .controls {
        position: relative;
        bottom: 7em;
      }
    </style>
    <script language="javascript" src="/public/demo/jsplumb.js"></script>
    <script language="javascript">
      function getConnector(source_name, target_name) {
        var source = document.getElementById(source_name);
        var target = document.getElementById(target_name);
        return jsPlumb.getConnections({source: source, target: target})[0].connector.getDisplayElements()[0];
      }

      function flashConnector(source, target) {
        var connector = getConnector(source, target);
        connector.classList.remove("highlight");
        setTimeout(function () { connector.classList.add("highlight"); }, 250);
      }

      function connect(target_name, source_name) {
        var source = document.getElementById(source_name);
        var target = document.getElementById(target_name);
        jsPlumb.connect({
          source: source,
          target: target,
          anchors: [ anchor(source, target), anchor(target, source) ],
          overlays: [ ["Arrow", { location: 0.7 }] ],
          connector: ["Flowchart", { midpoint: 0.1 }],
          endpoint: "Blank"
        });
      }

      function anchor(element, other) {
        if (element.classList.contains("left")) {
          return "Right";
        } else if (element.classList.contains("right")) {
          return "Left";
        } else if (element.classList.contains("vertical-lower") || element.classList.contains("vertical-very-lower")) {
          return "Top";
        } else if (element.classList.contains("vertical-upper") || element.classList.contains("vertical-very-upper")) {
          return "Bottom";
        } else if (anchor(other) == "Right") {
          return "Left";
        } else if (anchor(other) == "Left") {
          return "Right";
        }
      }

      function updateLogs() {
        var text = document.getElementById('logs').value;
        var log_entry_matcher = /([A-Z]+)\s+\[([a-zA-Z0-9\-]+)\] \(([0-9]+)\): ([a-f0-9\-]+: )?(.*)$/
        window.entries = text.split("\n").map(function (e) {
          var matches = log_entry_matcher.exec(e);
          if (matches != null) {
            return {severity: matches[1], node: matches[2], time: parseInt(matches[3]), query: matches[4], message: matches[5]}
          } else {
            return null;
          }
        }).filter(function (e) { return e != null })
        .sort(function (a, b) { return a.time - b.time });

        window.cursor = window.entries.length - 1;
        drawLogEntry(window.cursor = 0);
      }

      function resetIcons() {
        document.querySelectorAll(".node").forEach(function(n) { n.classList.remove("matched", "unmatched", "matching", "asking", "answered", "answered_bad")});
      }

      function stepLogEntry(direction) {
        do {
          window.cursor += direction;
          if (window.cursor < 0 || window.cursor >= window.entries.length) { resetIcons(); return drawLogEntry(window.cursor = 0); }
          if (direction < 0) { resetIcons(); }
        } while (!drawLogEntry(window.cursor));
      }

      function drawLogEntry(i) {
        var entry = window.entries[i];
        document.getElementById("status").innerText = entry.message;

        document.querySelectorAll(".node").forEach(function (n) { n.classList.remove("flash") });
        document.querySelectorAll(".bubble").forEach(function (n) { n.classList.remove("show") });

        var question_match = /Question chosen as (\S+)/.exec(entry.message);
        if (question_match != null) {
          showBubble(entry.node, question_match[1]);
          return true;
        }

        var matching_match = /Matching with identity:/.exec(entry.message);
        if (matching_match != null) {
          showIcon(entry.node, "matching");
          return true;
        }

        var match_complete_match = /Matching complete!/.exec(entry.message);
        if (match_complete_match != null) {
          showIcon(entry.node, "matched");
          return true;
        }

        var match_complete_match = /Matching incomplete/.exec(entry.message);
        if (match_complete_match != null) {
          showIcon(entry.node, "unmatched");
          return true;
        }

        var asking_match = /Asking (\S+)/.exec(entry.message);
        if (asking_match != null) {
          showBubble(entry.node, asking_match[1]);
          showIcon(entry.node, "asking");
          return true;
        }

        var answered_match = /ValueResponse/.exec(entry.message);
        if (answered_match != null) {
          showIcon(entry.node, "answered");
          return true;
        }

        var answered_match = /ErrorResponse/.exec(entry.message);
        if (answered_match != null) {
          showIcon(entry.node, "answered_bad");
          return true;
        }

        return false;
      }

      function showIcon(node, klass) {
        var elem = document.getElementById(node);
        elem.classList.remove("unmatched", "matching", "matched", "asking", "answered", "answered_bad");
        elem.classList.add(klass);
      }

      function showBubble(node, message) {
        var bubble = document.getElementById(node).querySelector(".bubble");
        bubble.classList.add("show");
        bubble.innerText = message;
      }

      function refreshAvailable() {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "./available", true);
        xhr.onreadystatechange = function() {
          if (xhr.readyState == XMLHttpRequest.DONE && xhr.status === 200) {
            var available = JSON.parse(xhr.responseText);
            var select = document.getElementById("available");
            select.innerHTML = "";
            for (i in available) {
              var opt = document.createElement('option');
              opt.value = available[i];
              opt.innerHTML = available[i];
              select.appendChild(opt);
            }
          }
        }
        xhr.send();
      }

      function loadNewLog(event) {
        if (!event.target.value) return;
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "./" + value, true);
        xhr.onreadystatechange = function() {
          if (xhr.readyState == XMLHttpRequest.DONE && xhr.status === 200) {
            document.getElementById("logs").innerHTML = xhr.responseText;
            updateLogs();
          }
        };
        xhr.send();
      }

      jsPlumb.ready(function () {
        window.addEventListener("resize", jsPlumb.repaintEverything);
        document.getElementById("logs").addEventListener("change", updateLogs);
        document.getElementById("back").addEventListener("click", function () { stepLogEntry(-1); });
        document.getElementById("next").addEventListener("click", function () { stepLogEntry(+1); });
        document.getElementById("reset").addEventListener("click", function () { drawLogEntry(window.cursor = 0); });
        document.getElementById("refresh").addEventListener("click", refreshAvailable);
        document.getElementById("available").addEventListener("change", loadNewLog)
        jsPlumb.setContainer(document.querySelector('#diagram'));
        connect("bb-web-client", "bb-query-server");
        connect("bb-query-server", "bb-da-pip");
        connect("bb-query-server", "bb-da-dla");
        document.getElementById("sp2").addEventListener("click", function () {
          connect("sp2", "bb-da-pip");
          document.getElementById("sp2").classList.remove("invisible");
        });
        document.getElementById("sp3").addEventListener("click", function () {
          connect("sp3", "bb-query-server");
          document.getElementById("sp3").classList.remove("invisible");
        });
        updateLogs();
      });
    </script>
  </head>
  <body>
    <div id="diagram">
      <figure id="sp2" class="node blue left vertical-upper invisible">
        <div class="bubble">bb?</div>
        <img src="/public/demo/query.svg" alt="SP">
        <figcaption>NHS<span>Low Income</span></figcaption>
      </figure>
      <figure id="bb-web-client" class="node yellow left vertical-middle">
        <div class="bubble">bb?</div>
        <img src="/public/demo/query.svg" alt="SP">
        <figcaption>York CC<span>Blue Badge</span></figcaption>
      </figure>
      <figure id="bb-query-server" class="node purple middle vertical-middle">
        <div class="bubble">bb?</div>
        <img src="/public/demo/logic.svg" alt="QS">
        <figcaption>DfT<span>BB Logic</span></figcaption>
      </figure>
      <figure id="bb-da-pip" class="node green right vertical-upper">
        <div class="bubble">bb?</div>
        <img src="/public/demo/data.svg" alt="DA (PIP)">
        <figcaption>DWP<span>PIP</span></figcaption>
      </figure>
      <figure id="bb-da-dla" class="node green right vertical-lower">
        <div class="bubble">bb?</div>
        <img src="/public/demo/data.svg" alt="DA (PIP)">
        <figcaption>DWP<span>DLA</span></figcaption>
      </figure>
      <figure id="sp3" class="node red left vertical-lower invisible">
        <div class="bubble">bb?</div>
        <img src="/public/demo/query.svg" alt="DA (DLA)">
        <figcaption>Hull CC<span>Blue Badge</span></figcaption>
      </figure>
    </div>
    <textarea id="logs">
    </textarea>
    <div class="controls">
      <select id="available"></select>
      <button id="refresh">&#x1F504;</button>
      <button id="reset">&#x23EA;</button>
      <button id="back">&#x25C0;</button>
      <button id="next">&#x25B6;</button>
      <span id="status"></span>
    </div>
  </body>
</html>